#!/usr/bin/python
# https://mike.depalatis.net/blog/simplifying-argparse.html
from argparse import ArgumentParser
from pathlib import Path
import functools


cli = ArgumentParser()
subparsers = cli.add_subparsers()


# https://www.artima.com/weblogs/viewpost.jsp?thread=240845#decorator-functions-with-decorator-arguments
def subcommand(name_or_flags=None, **kwargs):
    def decorator(func):
        parser = subparsers.add_parser(func.__name__, description=func.__doc__)
        # TODO Do some checking on the args
        if name_or_flags is not None:
            parser.add_argument(name_or_flags, **kwargs)
        parser.set_defaults(func=func)
    return decorator




# def decorator(func):
#     @functools.wraps(func)
#     def wrapper_decorator(*args, **kwargs):
#         # Do something before
#         value = func(*args, **kwargs)
#         # Do something after
#         return value
#     return wrapper_decorator


@subcommand("bundle", type=Path)
def cmd_ls(bundle: Path) -> None:
    """Display the contents of BUNDLE."""
    print(f"{bundle}")


if __name__ == '__main__':
    args = cli.parse_args()
    args.func(args)
    print("After parsing")
